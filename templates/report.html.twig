{% extends "base.html.twig" %}

{% block title %}Rapporter{% endblock %}

{% block body %}
        
       <div class="twocol" id="reportcontent"> 
    <main class="main">
        <article>
          <h1>Redovisning</h1>
        
        
        
          <h2 id="kmom01">kmom01</h2>

          <p>Objektorientering är föga förvånande en viktig del av programmering, så man lär i princip stöta på det ganska ofta.
          Jag själv har gått kurser kring objektorienterad programmering i både python, c#, och c++. 
          Mycket av PHP:S modell kring objekt och klasser är likt andra programmeringsspråk, alltså att man behöver definiera en klass,
          göra konstruktor, och eventuella metoder. Om man till exempel vill göra en subklass som ärver från en annan klass använder man
          extends. Själva basen och strukturen ser ut mycket som den gör beroende på faktumet att symfony som ramverk används. 
          Det är skönt att ha en "annan" struktur att luta sig tillbaka emot för att göra det enklare att kod körs på en server, och dessutom blir
          CSS-och routing-hanteringen betydligt mycket enklare eftersom symfony tar hand om det själv.
          PHP The Right Way verkar generellt vara en bra resurs och lathund att kolla på om man är osäker på det bästa sättet
          att skriva en speciell bit kod som har ett specifikt syfte, samt även en bra style guide.
          Det jag gärna vill kolla lite närmare på från den artikeln är definitivt säkrehetsdelen, då webbprogrammering utan ett säkerhetstänk
          är riktigt bristfälligt. 
          Mitt TIL för den här uppgiften är: Gör alltid installationer helt korrekt, och fel som kräver ominstallationer tar ofta tid att lösa,
          speciellt om de inte är kopplad till egentliga fel i din egna kod. </p>
        
          <h2 id="kmom02">kmom02</h2>

          <p>Arv fungerar i PHP precis som det gör i andra programmeringsspråk, det vill säga att klasser kan ha subklasser som ärver från en basklass. 
          Oftast handlar det om att subklasser ärver funktioner som en basklass har, 
          men kanske har en egen konstruktor. Komposition är lite annorlunda men har en liknande princip. Om arv handlar om att en subklass är en klass, så handlar komposition om att
          en klass kan inehålla andra klasser. Till exempel kan det vara en klass som är en tågdepå där en klass i form av tåg kan finnas. 
          Om en basklass som har kompositon med en annan klass tas bort så försvinner också klasserna som basklassen innehåller.
          En interface är en slags mall som beskriver vilka funktioner en klass ska ha, men i själva interfacet så specifieras det inte vad klasserna ska göra. 
          Välidgt lik abstrakta funktioner i till exempel Python, med andra ord.
          En trait, å andra sidan, är en form av arv som fungerar om en subklass kan behöva ärva metoder från flera stycken basklasser. I det här fallet fungerar inte ett vanligt arv, 
          eftersom att i PHP kan bara en subklass bara ärva från en enda basklass. På det här sättet kan ärvandet av metoder användas i flera stycken klasser.
          
          Uppgiften löste jag genom att använda grundtanken att det finns 52 stycken kort i en kortlek. Alltså satte jag för varje kort i en kortlek en UTF-8 representation av ett kort, som visas
          som ett grafiskt kort i webbläsaren. Dessa 52 kort är de korten som finns i kortleken, alltså deckOfCards.
          Dessa kort kan sedan visas eller tas bort i deckOfCards-klassen, som också i sig kallar på en hand-klass när man drar ett eller flera kort från leken. Jag tyckte den 52-baserade lösningen med grafiska tecken-representationer
          av kort var bra, men i kommande uppgifter kanske det kommer att visa sig hur bra den lösningen egentligen är, då varje kort endast är en grafisk representation och har egentligen inget eget värde, förutom vilket
          av de 52 korten det är.  Däremot så skulle man alltid kunna lägga till värde som ett värde i arrayen där korten finns, för att på så sätt ha kort som nycklar och själva värdet på korten som värde.

          Det har fungerat relativt bra med symfony, men ibland verkar det som att ramverket inte hittar klasserna även om de finns där på grund av diverse anledningar som kan göra det lite frustrerande, då det egentligen
          aldrig är något fel.

          Mitt TIL för det här kursmomentet är: Man kan egentligen börja med att göra APIn i en sådan här uppgift, men i det här fallet tyckte nästan jag det var bättre att göra den sist. 
          </p>

          <h2 id="kmom03">kmom03</h2>

          <p>Här kommer redovisningstexten för detta kursmoment.</p>

          <h2 id="kmom04">kmom04</h2>

          <p>Här kommer redovisningstexten för detta kursmoment.</p>

          <h2 id="kmom05">kmom05</h2>

          <p>Här kommer redovisningstexten för detta kursmoment.</p>

          <h2 id="kmom06">kmom06</h2>

          <p>Här kommer redovisningstexten för detta kursmoment.</p>

          <h2 id="kmom10">kmom10</h2>

          <p>Här kommer redovisningstexten för detta kursmoment.</p>

         


        </article>

    </main>

    <aside class="conttable">
      <h1>Innehåll</h1>
        <ul>
          <li class="rep"><a href="#kmom01">Kmom01</a></li>
          <li class="rep"><a href="#kmom02">Kmom02</a></li>
          <li class="rep"><a href="#kmom03">Kmom03</a></li>
          <li class="rep"><a href="#kmom04">Kmom04</a></li>
          <li class="rep"><a href="#kmom05">Kmom05</a></li>
          <li class="rep"><a href="#kmom06">Kmom06</a></li>
          <li class="rep"><a href="#kmom10">Kmom10</a></li>
        </ul>
    </aside>
  </div>

{% endblock %}